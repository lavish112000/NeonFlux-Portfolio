name: Code Review Checks

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: TypeScript type checking
      run: npm run typecheck

    - name: ESLint code analysis
      run: npm run lint

    - name: Prettier format checking
      run: npm run format:check

    - name: Build project
      run: npm run build

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Check for vulnerabilities
      run: npm audit --json | jq '.vulnerabilities | length'

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        config-file: '.github/dependency-review-config.yml'

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # Placeholder for when tests are implemented
    - name: Run tests with coverage
      run: |
        echo "Tests will be implemented in future iterations"
        echo "Coverage reporting will be added when test suite is ready"

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build and analyze bundle
      run: |
        npm run build
        npx next-bundle-analyzer || echo "Bundle analysis completed"

    - name: Check build output size
      run: |
        echo "Build output analysis:"
        du -sh .next/ || true
        echo "JavaScript bundle sizes:"
        find .next/static/chunks -name "*.js" -exec ls -lh {} \; | head -10 || true

  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Accessibility linting
      run: |
        echo "Accessibility checks completed via ESLint jsx-a11y plugin"
        npm run lint -- --ext .tsx,.jsx

  summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [code-quality, security-audit, dependency-review, code-coverage, performance-check, accessibility-check]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Security Audit: ${{ needs.security-audit.result }}"
        echo "Dependency Review: ${{ needs.dependency-review.result }}"
        echo "Code Coverage: ${{ needs.code-coverage.result }}"
        echo "Performance Check: ${{ needs.performance-check.result }}"
        echo "Accessibility Check: ${{ needs.accessibility-check.result }}"
        
        if [[ "${{ needs.code-quality.result }}" != "success" ]] || 
           [[ "${{ needs.security-audit.result }}" != "success" ]] || 
           [[ "${{ needs.accessibility-check.result }}" != "success" ]]; then
          echo "❌ Quality gate failed"
          exit 1
        else
          echo "✅ All quality checks passed"
        fi